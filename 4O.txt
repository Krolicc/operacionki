#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    INCORRECT_FLAG_INPUT,
    FILE_OPENING_ERROR,
    FILE_READING_ERROR = 404,
    FILE_WRITING_ERROR,
    FILE_CLOSING_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Некорректный флаг, попробуйте еще раз",
        "Ошибка открытия файла",
        "Ошибка чтения файла",
        "Ошибка записи файла",
        "Ошибка закрытия файла",
        "Неизвестная ошибка, что-то пошло не так"
};

int xor8(FILE *file) {
    int byte, result = 0;

    while ((byte = fgetc(file)) != EOF) result ^= byte;

    if ( feof (file) != 0) {} else return FILE_READING_ERROR;

    return result;
}

int xor32(FILE *file) {
    int byte, buffer[4] = {0, 0, 0, 0}, counter=0;

    while ((byte = fgetc(file)) != EOF) {
        buffer[counter] ^= byte;
        counter++;
        if(counter == 4) counter = 0;
    }

    if ( feof (file) != 0) {} else return FILE_READING_ERROR;

    char ans[8];
    sprintf(ans, "%X%X%X%X", buffer[0], buffer[1], buffer[2], buffer[3]);
    return atoi(ans);
}

int print_mask(FILE *file, char *mask) {

    int word_counter = 0, count=0;
    char number[8] = "", extra_number[2], symbol;

    while ((symbol = fgetc(file)) != EOF) {

        sprintf(extra_number, "%X", symbol);

        number[word_counter] = extra_number[0];
        number[word_counter+1] = extra_number[1];

        word_counter += 2;
        if(word_counter == 8) {

            for(int i=0; i<8; i++) {
                if(mask[i] == '0' || mask[i] == number[i]) {}
                else {
                    count--;
                    break;
                }
            }

            count++;

            for(int i=0; i<=7; ++i){
                number[i] = '\0';
            }

            word_counter = 0;
        }
    }

    if ( feof (file) != 0) {} else return FILE_READING_ERROR;

    return count;
}

int main(int argc, char *argv[]) {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    if(argc != 3) {
        printf("%s", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
        return INCORRECT_NUMBER_ARGUMENTS_INPUT;
    }

    char symbols8_mask[] = "12314000";
    int answer;

    FILE *file = fopen(argv[1], "rb");

    if (file == NULL) {
        printf("%s", errorMessages[FILE_OPENING_ERROR]);
        return FILE_OPENING_ERROR;
    }

    if (strcmp(argv[2], "xor8") == 0) {

        answer = xor8(file);

        if (answer == FILE_READING_ERROR) {
            printf("%s", errorMessages[FILE_READING_ERROR-400]);
            return FILE_READING_ERROR;
        } else printf("Результат операции XOR8: %02X\n", answer);

    } else if (strcmp(argv[2], "xor32") == 0) {

        answer = xor32(file);

        if (answer == FILE_READING_ERROR) {
            printf("%s", errorMessages[FILE_READING_ERROR - 400]);
            return FILE_READING_ERROR;
        } else {}
            printf("Результат операции XOR32: %d\n", answer);

    } else if (strcmp(argv[2], "mask") == 0) {

        answer = print_mask(file, symbols8_mask);

        if (answer == FILE_READING_ERROR) {
            printf("%s", errorMessages[FILE_READING_ERROR-400]);
            return FILE_READING_ERROR;
        } else printf("Количество чисел, соответствующих маске %s: %d\n", symbols8_mask, answer);

    } else {
        printf("%s", errorMessages[INCORRECT_FLAG_INPUT]);

        if (fclose (file) == EOF) {
            printf ("%s", errorMessages[FILE_CLOSING_ERROR]);
            return FILE_CLOSING_ERROR;
        }

        return INCORRECT_FLAG_INPUT;
    }

    if (fclose(file) == EOF) {
        printf ("%s", errorMessages[FILE_CLOSING_ERROR]);
        return FILE_CLOSING_ERROR;
    }

    return SUCCESS;
}
