#include <stdio.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    FILE_OPENING_ERROR,
    FILE_READING_ERROR,
    FILE_WRITING_ERROR,
    FILE_CLOSING_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Ошибка открытия файла",
        "Ошибка чтения файла",
        "Ошибка записи файла",
        "Ошибка закрытия файла",
        "Неизвестная ошибка, что-то пошло не так"
};


int main(int argc, char *argv[]) {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    if(argc != 2) {
        printf("%s", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
        return INCORRECT_NUMBER_ARGUMENTS_INPUT;
    }

    int symbol;
    unsigned char buffer[4], data[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};

    FILE *fp = fopen(argv[1], "wb");

    if (fp == NULL) {
        printf("%s", errorMessages[FILE_OPENING_ERROR]);
        return FILE_OPENING_ERROR;
    }

    if (fwrite(data, sizeof(unsigned char), sizeof(data), fp) != sizeof(data)) {
        printf ("%s", errorMessages[FILE_WRITING_ERROR]);
        return FILE_WRITING_ERROR;
    }

    if ( fclose (fp) == EOF) {
        printf ("%s", errorMessages[FILE_CLOSING_ERROR]);
        return FILE_CLOSING_ERROR;
    }

    fp = fopen(argv[1], "rb");

    if (fp == NULL) {
        printf("%s", errorMessages[FILE_OPENING_ERROR]);
        return FILE_OPENING_ERROR;
    }

    while ((symbol = fgetc(fp)) != EOF) {
        printf("Байт: %d\n", symbol);
        printf("Текущая позиция: %ld\n", ftell(fp));
        printf("Флаги: %d\n", fp->_flag);
        printf("Файловый дескриптор: %d\n\n", fileno(fp));
    }

    if ( feof (fp) != 0) {} else {
        printf("%s", errorMessages[FILE_READING_ERROR]);
        return FILE_READING_ERROR;
    }

    if ( fclose (fp) == EOF) {
        printf ("%s", errorMessages[FILE_CLOSING_ERROR]);
        return FILE_CLOSING_ERROR;
    }

    fp = fopen(argv[1], "rb");

    if (fp == NULL) {
        printf("%s", errorMessages[FILE_OPENING_ERROR]);
        return FILE_OPENING_ERROR;
    }

    fseek(fp, 3, SEEK_SET);
    fread(buffer, sizeof(unsigned char), sizeof(buffer), fp);

    if ( feof (fp) != 0) {} else {
        printf("%s", errorMessages[FILE_READING_ERROR]);
        return FILE_READING_ERROR;
    }

    if ( fclose (fp) == EOF) {
        printf ("%s", errorMessages[FILE_CLOSING_ERROR]);
        return FILE_CLOSING_ERROR;
    }

    printf("В буфере: ");
    for (int i = 0; i < sizeof(buffer) / sizeof(unsigned char); i++) {
        printf("%d ", buffer[i]);
    }

    return SUCCESS;
}
